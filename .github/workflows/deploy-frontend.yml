name: Deploy Frontend to S3 + CloudFront

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.MY_AWS_REGION }}
  # S3 bucket for hosting the static website
  S3_BUCKET_NAME: ${{ secrets.FRONTEND_S3_BUCKET_NAME }}
  # CloudFront distribution ID for cache invalidation
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
  # API Gateway URL for the frontend to use
  REACT_APP_API_BASE_URL: ${{ secrets.REACT_APP_API_BASE_URL }}

jobs:
  deploy:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build React app
        run: |
          cd frontend
          npm run build
        env:
          REACT_APP_API_BASE_URL: ${{ env.REACT_APP_API_BASE_URL }}
          CI: false # Disable treating warnings as errors

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        run: |
          # Sync the build folder to S3 bucket
          aws s3 sync frontend/build/ s3://${{ env.S3_BUCKET_NAME }}/ \
            --delete \
            --cache-control "public,max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js" \
            --exclude "manifest.json"
          
          # Upload HTML files with no-cache headers
          aws s3 sync frontend/build/ s3://${{ env.S3_BUCKET_NAME }}/ \
            --delete \
            --cache-control "public,max-age=0,must-revalidate" \
            --include "*.html" \
            --include "service-worker.js" \
            --include "manifest.json"

      - name: Invalidate CloudFront cache
        run: |
          if [ -n "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "Invalidating CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
            aws cloudfront create-invalidation \
              --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
              --paths "/*"
          else
            echo "CLOUDFRONT_DISTRIBUTION_ID not set, skipping cache invalidation"
          fi

      - name: Output deployment info
        run: |
          echo "Frontend deployed to S3 bucket: ${{ env.S3_BUCKET_NAME }}"
          if [ -n "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "CloudFront distribution: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
            echo "Website URL: https://$(aws cloudfront get-distribution --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)"
          fi

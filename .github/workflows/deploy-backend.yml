name: Deploy Backend Lambdas

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  # Region to deploy Lambdas into
  AWS_REGION: ${{ secrets.MY_AWS_REGION }}
  # Lambda function names (create if missing; update if exists)
  GET_CAKES_FUNCTION_NAME: ${{ secrets.GET_CAKES_FUNCTION_NAME }}
  UPLOAD_FUNCTION_NAME: ${{ secrets.UPLOAD_FUNCTION_NAME }}
  AUTH_FUNCTION_NAME: ${{ secrets.AUTH_FUNCTION_NAME }}
  # Execution role for Lambda functions (reuse existing AWS_ROLE_ARN or use specific role ARNs if set)
  LAMBDA_EXECUTION_ROLE_ARN: ${{ secrets.LAMBDA_EXECUTION_ROLE_ARN || secrets.GET_CAKES_ROLE_ARN || secrets.AWS_ROLE_ARN }}
  # App configuration passed to Lambda environment
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  ADMIN_PASSWORD_HASH: ${{ secrets.ADMIN_PASSWORD_HASH }}

jobs:
  deploy:
    name: Build and Deploy Lambdas
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Package get-cakes Lambda
        run: |
          set -e
          mkdir -p backend/dist/get-cakes
          cp backend/get-cakes-lambda.js backend/dist/get-cakes/index.js
          cat > backend/dist/get-cakes/package.json <<'PKG'
          {
            "name": "get-cakes-lambda",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "@aws-sdk/client-s3": "^3.525.0",
              "@aws-sdk/s3-request-presigner": "^3.525.0"
            }
          }
          PKG
          cd backend/dist/get-cakes
          npm ci || npm install
          cd -
          cd backend/dist/get-cakes && zip -r ../get-cakes.zip . && cd -

      - name: Package upload-to-s3 Lambda
        run: |
          set -e
          mkdir -p backend/dist/upload
          cp backend/upload-to-s3-lambda.js backend/dist/upload/index.js
          cat > backend/dist/upload/package.json <<'PKG'
          {
            "name": "upload-to-s3-lambda",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "@aws-sdk/client-s3": "^3.525.0",
              "uuid": "^9.0.1",
              "lambda-multipart-parser": "^1.0.1"
            }
          }
          PKG
          cd backend/dist/upload
          npm ci || npm install
          cd -
          cd backend/dist/upload && zip -r ../upload.zip . && cd -

      - name: Package auth Lambda
        run: |
          set -e
          mkdir -p backend/dist/auth
          cp backend/auth-lambda.js backend/dist/auth/index.js
          cat > backend/dist/auth/package.json <<'PKG'
          {
            "name": "auth-lambda",
            "version": "1.0.0",
            "private": true,
            "dependencies": {
              "bcryptjs": "^2.4.3"
            }
          }
          PKG
          cd backend/dist/auth
          npm ci || npm install
          cd -
          cd backend/dist/auth && zip -r ../auth.zip . && cd -

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create or Update get-cakes Lambda
        shell: bash
        run: |
          set -e
          if [ -z "${GET_CAKES_FUNCTION_NAME}" ]; then
            echo "GET_CAKES_FUNCTION_NAME secret not set" >&2; exit 1;
          fi

          # Retry function with exponential backoff
          retry_lambda_operation() {
            local max_attempts=5
            local base_delay=10
            local attempt=1
            local exit_code=0

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: $@"
              if "$@"; then
                echo "Operation succeeded on attempt $attempt"
                return 0
              else
                exit_code=$?
                if [ $attempt -eq $max_attempts ]; then
                  echo "All $max_attempts attempts failed for: $@"
                  return $exit_code
                fi
                
                local delay=$((base_delay * attempt))
                echo "Attempt $attempt failed with exit code $exit_code. Retrying in ${delay}s..."
                sleep $delay
                attempt=$((attempt + 1))
              fi
            done
          }

          if aws lambda get-function --function-name "$GET_CAKES_FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Updating code for $GET_CAKES_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-code \
              --function-name "$GET_CAKES_FUNCTION_NAME" \
              --zip-file fileb://backend/dist/get-cakes.zip
            
            echo "Waiting for code update to complete..."
            aws lambda wait function-updated --function-name "$GET_CAKES_FUNCTION_NAME"
            
            echo "Updating configuration (env vars) for $GET_CAKES_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-configuration \
              --function-name "$GET_CAKES_FUNCTION_NAME" \
              --environment "Variables={S3_BUCKET_NAME=${S3_BUCKET_NAME}}"
            
            echo "Waiting for configuration update to complete..."
            aws lambda wait function-updated --function-name "$GET_CAKES_FUNCTION_NAME"
          else
            echo "Creating $GET_CAKES_FUNCTION_NAME"
            if [ -z "${LAMBDA_EXECUTION_ROLE_ARN}" ]; then
              echo "LAMBDA_EXECUTION_ROLE_ARN not set (required to create function)" >&2; exit 1;
            fi
            retry_lambda_operation aws lambda create-function \
              --function-name "$GET_CAKES_FUNCTION_NAME" \
              --runtime nodejs18.x \
              --role "$LAMBDA_EXECUTION_ROLE_ARN" \
              --handler index.handler \
              --zip-file fileb://backend/dist/get-cakes.zip \
              --environment "Variables={S3_BUCKET_NAME=${S3_BUCKET_NAME}}" \
              --timeout 30 \
              --memory-size 256
            
            echo "Waiting for $GET_CAKES_FUNCTION_NAME to become active..."
            aws lambda wait function-active --function-name "$GET_CAKES_FUNCTION_NAME"
          fi

      - name: Create or Update upload-to-s3 Lambda
        shell: bash
        run: |
          set -e
          if [ -z "${UPLOAD_FUNCTION_NAME}" ]; then
            echo "UPLOAD_FUNCTION_NAME secret not set" >&2; exit 1;
          fi

          # Retry function with exponential backoff
          retry_lambda_operation() {
            local max_attempts=5
            local base_delay=10
            local attempt=1
            local exit_code=0

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: $@"
              if "$@"; then
                echo "Operation succeeded on attempt $attempt"
                return 0
              else
                exit_code=$?
                if [ $attempt -eq $max_attempts ]; then
                  echo "All $max_attempts attempts failed for: $@"
                  return $exit_code
                fi
                
                local delay=$((base_delay * attempt))
                echo "Attempt $attempt failed with exit code $exit_code. Retrying in ${delay}s..."
                sleep $delay
                attempt=$((attempt + 1))
              fi
            done
          }

          if aws lambda get-function --function-name "$UPLOAD_FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Updating code for $UPLOAD_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-code \
              --function-name "$UPLOAD_FUNCTION_NAME" \
              --zip-file fileb://backend/dist/upload.zip
            
            echo "Waiting for code update to complete..."
            aws lambda wait function-updated --function-name "$UPLOAD_FUNCTION_NAME"
            
            echo "Updating configuration (env vars) for $UPLOAD_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-configuration \
              --function-name "$UPLOAD_FUNCTION_NAME" \
              --environment "Variables={S3_BUCKET_NAME=${S3_BUCKET_NAME},ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}}"
            
            echo "Waiting for configuration update to complete..."
            aws lambda wait function-updated --function-name "$UPLOAD_FUNCTION_NAME"
          else
            echo "Creating $UPLOAD_FUNCTION_NAME"
            if [ -z "${LAMBDA_EXECUTION_ROLE_ARN}" ]; then
              echo "LAMBDA_EXECUTION_ROLE_ARN not set (required to create function)" >&2; exit 1;
            fi
            retry_lambda_operation aws lambda create-function \
              --function-name "$UPLOAD_FUNCTION_NAME" \
              --runtime nodejs18.x \
              --role "$LAMBDA_EXECUTION_ROLE_ARN" \
              --handler index.handler \
              --zip-file fileb://backend/dist/upload.zip \
              --environment "Variables={S3_BUCKET_NAME=${S3_BUCKET_NAME},ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}}" \
              --timeout 60 \
              --memory-size 512
            
            echo "Waiting for $UPLOAD_FUNCTION_NAME to become active..."
            aws lambda wait function-active --function-name "$UPLOAD_FUNCTION_NAME"
          fi

      - name: Create or Update auth Lambda
        shell: bash
        run: |
          set -e
          if [ -z "${AUTH_FUNCTION_NAME}" ]; then
            echo "AUTH_FUNCTION_NAME secret not set" >&2; exit 1;
          fi

          # Retry function with exponential backoff
          retry_lambda_operation() {
            local max_attempts=5
            local base_delay=10
            local attempt=1
            local exit_code=0

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: $@"
              if "$@"; then
                echo "Operation succeeded on attempt $attempt"
                return 0
              else
                exit_code=$?
                if [ $attempt -eq $max_attempts ]; then
                  echo "All $max_attempts attempts failed for: $@"
                  return $exit_code
                fi
                
                local delay=$((base_delay * attempt))
                echo "Attempt $attempt failed with exit code $exit_code. Retrying in ${delay}s..."
                sleep $delay
                attempt=$((attempt + 1))
              fi
            done
          }

          if aws lambda get-function --function-name "$AUTH_FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Updating code for $AUTH_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-code \
              --function-name "$AUTH_FUNCTION_NAME" \
              --zip-file fileb://backend/dist/auth.zip
            
            echo "Waiting for code update to complete..."
            aws lambda wait function-updated --function-name "$AUTH_FUNCTION_NAME"
            
            echo "Updating configuration (env vars) for $AUTH_FUNCTION_NAME"
            retry_lambda_operation aws lambda update-function-configuration \
              --function-name "$AUTH_FUNCTION_NAME" \
              --environment "Variables={ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}}"
            
            echo "Waiting for configuration update to complete..."
            aws lambda wait function-updated --function-name "$AUTH_FUNCTION_NAME"
          else
            echo "Creating $AUTH_FUNCTION_NAME"
            if [ -z "${LAMBDA_EXECUTION_ROLE_ARN}" ]; then
              echo "LAMBDA_EXECUTION_ROLE_ARN not set (required to create function)" >&2; exit 1;
            fi
            retry_lambda_operation aws lambda create-function \
              --function-name "$AUTH_FUNCTION_NAME" \
              --runtime nodejs18.x \
              --role "$LAMBDA_EXECUTION_ROLE_ARN" \
              --handler index.handler \
              --zip-file fileb://backend/dist/auth.zip \
              --environment "Variables={ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH}}" \
              --timeout 30 \
              --memory-size 256
            
            echo "Waiting for $AUTH_FUNCTION_NAME to become active..."
            aws lambda wait function-active --function-name "$AUTH_FUNCTION_NAME"
          fi

      - name: Output Lambda ARNs
        run: |
          aws lambda get-function --function-name "$GET_CAKES_FUNCTION_NAME" --query 'Configuration.FunctionArn' --output text
          aws lambda get-function --function-name "$UPLOAD_FUNCTION_NAME" --query 'Configuration.FunctionArn' --output text
          aws lambda get-function --function-name "$AUTH_FUNCTION_NAME" --query 'Configuration.FunctionArn' --output text
